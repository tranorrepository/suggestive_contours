*Decimation*
1. Calculating quadrics
This is pretty straightforward. Per vertex, we loop over all adjacent faces and for each face, we obtain the normal, normalize it, and calculate the distance of origin from the plane as the projection of the vertex position on the plane normal. Then the quadric is simply the 4 vector of the plane coefficients (normal and distance) and its transpose. We sum over the quadrics for each face to get the quadric for the vertex.

2. Collapse priority for half edges
To do this, we sum the quadrics for the end vertices for the half edge to obtain the half edge quadric, and then evaluate the quadric error at the optimal position of the new vertex if the half edge were to be collapsed. This error value is stored as the priority for this half edge.

3. Optimal position for collapsed vertex
To obtain the optimal position for the collapsed vertex, we first obtain the rank revealing QR decomposition for the solver matrix obtained from the half edge quadric as described in the paper. If the solver matrix is full rank, we go ahead and obtain the optimal vertex position by solving the linear system. If not, we fall back to using the to_vertex of the half edge as the optimal position.

4. Decimation
For a given target number of vertices, we simply iterate over the priority queue of half edges, and where a collapse is valid, we collapse the half edge, update the position of the to_vertex to the optimal position evaluated for this collapse, and update the priorities for this vertex and its 1-circle neighbors (this also involves updating their quadrics first). 
   
*Suggestive Contours*

1. Implementation of isSihouette and isSharpEdge is described perfectly in the problem statement d)

2. Calculating View Curvatures

We first project the view_vector to the tangent plane:
view_vector_projected = view_vector - dot(tangent_plane_normal,view_vector)*tangent_plane_normal
Then cos(theta) where theta is component of the first principal vector T1 is just the dot product. 
The view curvature is then calculated as k1*cos(theta)^2 + k2*sin(theta)^2, wherek1 and k2 are the principal curvatures.

3. Rendering Suggestive Contours

For rendering, we loop over all of the faces to check for the two conditions that need to be satisfied by the suggestive contour: zero view curvature, and postive directional derivative in the view direction.
For checking zero view curvature, we iterate over the vertices and the condition is satisfied if for two edges of the trianglular face, the vertices of the edges have different signed view curvature values. 
To check for positive directional derivative, we pick the first vertex of the triangle as the vertex to calculate the view direction for that face. Then the directional derivative is the dot product of the view viector with the view curvature derivative. This value is constrained to be above a small positive threshold of 0.02*(norm of view vector) as descrived in the paper.
Finally, as described in the paper, to eliminate unstable contours, if the angle between the view vector and normal is < ~ 11 degrees, those edges are also eliminated.


